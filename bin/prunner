#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import threading
import psutil
import time

PRUNNER_VERSION = "0.0.2"

# Global variables
timeout_for_terminate = 5  # sec
check_alive_period = 5  # sec
verbose = False
check_alive_wait = 0.5  # sec

term_check_alive = threading.Event()
term_check_alive.clear()


def log_error(text):
    print("(prunner): ERROR: %s" % text)


def log_info(text):
    if verbose:
        print("(prunner): %s" % text)


def get_arg_param(param, defval=""):
    plist = list()
    if isinstance(param, list):
        plist = param
    else:
        plist.append(param)

    for i in range(0, len(sys.argv)):
        if sys.argv[i] in plist:
            if i + 1 < len(sys.argv):
                return sys.argv[i + 1]
            else:
                break

    return defval


def check_arg_param(param):
    plist = list()
    if isinstance(param, list):
        plist = param
    else:
        plist.append(param)

    for i in range(0, len(sys.argv)):
        if sys.argv[i] in plist:
            return True

    return False


class ChildProc:
    """
    The class describing properties of child processes
    """

    def __init__(self, cmd, params=list()):

        # config parameters (Default values)
        self.cmd = cmd  # command

        # <=0  - do not restart
        # 0    - always restart
        # >0   - the number of restart attempts
        self.restart = -1
        self.restart_pause = check_alive_period  # sec

        self.shell = True  # run with shell
        self.verbose = False  # False - disable stdout,stderr (dev/null)

        # init from params
        for p in params:
            if hasattr(self, p['name']):
                setattr(self, p['name'], p['value'])

        if isinstance(self.restart, bool):
            self.restart = int(0)

        # internal fields
        self.proc = None
        self.restart_attempt = 0
        self.restart_next_time = time.time()
        self.restart_reset()

    def is_restart_fail(self):
        return self.restart > 0 and self.restart_attempt > self.restart

    def is_ignore_restart(self):

        if self.restart < 0:
            return True

        if self.restart_pause > 0 and time.time() <= self.restart_next_time:
            return True

        return False

    def restart_reset(self):

        if self.restart < 0:
            return

        # not monotonic timer in python < 3.3! :(
        # if sys.version_info >= (3,3)..
        if self.restart_pause > 0:
            self.restart_next_time = time.time() + self.restart_pause

        if self.restart > 0:
            self.restart_attempt = self.restart_attempt + 1

    def run(self):
        """
        Run process
        :return: False - if run fail
        """
        log_info("run %s" % self.cmd)
        try:
            sout = None
            serr = None
            if not self.verbose:
                nul_f = open(os.devnull, 'w')
                sout = nul_f
                serr = nul_f

            self.proc = psutil.Popen(self.cmd, shell=self.shell, stdout=sout, stderr=serr)
            return self.check_alive()

        except OSError:
            if not self.is_restart_fail():
                log_error("RUN [FAIL]: '%s'" % self.cmd)
                return False

        return True

    def check_alive(self):

        try:
            if self.proc.is_running() or psutil.pid_exists(self.proc.pid):
                self.proc.wait(check_alive_wait)
        except psutil.TimeoutExpired:
            log_info("ALIVE [OK]: %s" % self.cmd)
            return True

        if self.is_ignore_restart():
            return True

        if self.is_restart_fail():
            return False

        log_info("restart process[pid='%d' attempt=%d max=%d]: '%s'" % (
            self.proc.pid, self.restart_attempt, self.restart, self.cmd))
        self.restart_reset()
        self.proc = None
        if not self.run() and self.is_restart_fail():
            log_error("RUN [FAIL]: %s" % self.cmd)
            return False

        return True


def do_check_alive(childs):
    """
    Process monitoring, and restart if necessary.
    :param childs: list of 'ChildProc' objects
    :return: None
    """
    while not term_check_alive.is_set():
        for p in childs:

            if not p.check_alive():
                term_check_alive.set()
                log_error("ALIVE [FAIL]: %s" % p.cmd)
                break

            if term_check_alive.is_set():
                break

        term_check_alive.wait(check_alive_period)


def do_run_after(run_list):
    for p in run_list:
        p.run()


def do_monitoring(main_pid, run_list, not_monit, run_after_list):
    """
    Running processes and monitoring
    :param main_pid: pid for monitoring
    :param run_list: list of process for run
    :param not_monit: True - disable monitoring (only run process)
    :param run_after: True - run programs after main process terminated
    :return: None
    """
    proc_list = list()
    interrupted = False
    for p in run_list:
        if p.run():
            proc_list.append(p)
        else:
            terminate_all_process(proc_list)
            exit(1)

    check_alive_thread = None
    if len(proc_list) > 0:
        check_alive_thread = threading.Thread(target=do_check_alive, args=(proc_list,))

    try:
        if not_monit:
            return

        term_check_alive.clear()
        if check_alive_thread:
            check_alive_thread.start()

        monit_process = psutil.Process(main_pid)
        while not term_check_alive.is_set():
            try:
                if not monit_process.wait(check_alive_period):
                    break
            except psutil.TimeoutExpired:
                pass

    except (KeyboardInterrupt, SystemExit):
        interrupted = True

    finally:
        term_check_alive.set()
        if check_alive_thread and check_alive_thread.is_alive():
            check_alive_thread.join()
        terminate_all_process(proc_list)

        # run programs after teminated
        if not interrupted and len(run_after_list) > 0:
            log_info("run programms after terminated main process...")
            do_run_after(run_after_list)


def terminate_all_process(proc_list):
    """
    Terminate all process
    :param proc_list: list of 'ChildProc' objects
    :return: None
    """
    log_info("terminate all processes..")
    term_list = list()
    for rp in proc_list:
        term_list.append(rp.proc)

    gone, alive = psutil.wait_procs(term_list, timeout=timeout_for_terminate)
    for p in alive:
        p.kill()


def parse_run_parameters(line):
    """
    get parameters from string
    :param line: "[param1=val1,param2,param3=val3,..]command"
    :return: ['command', [{'name': 'param1', 'value': 'val1'}, {'name': 'param2', 'value': True}, {'name': 'param3', 'value': 'val'}]]
    """
    if line.startswith("["):
        endpos = line.find(']')
        if endpos != -1:
            params = list()
            plist = line[1:endpos].split(',')
            for p in plist:
                v = dict()
                a = p.split('=')
                if len(a) > 1:
                    v['name'] = a[0].strip()
                    val = a[1].strip()
                    if val.isdigit():
                        val = int(val)
                    elif val.lower() == 'true' or val.lower() == 'false':
                        val = bool(val)

                    v['value'] = val
                else:
                    v['name'] = a[0].strip()
                    v['value'] = True

                if len(v['name']) > 0:
                    params.append(v)

            return [line[endpos + 1:].strip(), params]

    return [line.strip(), list()]


def read_from_file(fname):
    """
    Make process list from file
    :param fname: filename
    :return: list of 'ChildProc' objects
    """
    if not os.path.exists(fname):
        log_error("(read_from_file): Not found file '%s'" % fname)
        return list()

    run_list = list()
    with open(fname, 'r') as pfile:
        for line in pfile:
            if len(line) == 0 or line.startswith("#"):
                continue

            if line.startswith("["):
                cmd, params = parse_run_parameters(line)
                run_list.append(ChildProc(cmd=cmd, params=params))
            else:
                run_list.append(ChildProc(cmd=line))

    return run_list


def read_from_dir(dname):
    """
    Make list from directory
    :param dname: directory name (path)
    :return: list of 'ChildProc' objects
    """
    if not os.path.exists(dname):
        return list()

    plist = list()
    for f in os.listdir(dname):
        p = ChildProc(cmd=os.path.join(dname, f))
        plist.append(p)

    return plist


def read_from_commandline(param):
    params = list()
    if isinstance(param, list):
        params = param
    else:
        params.append(param)

    plist = list()

    skip = False
    for i in range(0, len(sys.argv)):
        if skip:
            skip = False
            continue

        if sys.argv[i] in params:
            if i + 1 >= len(sys.argv):
                break

            arg = sys.argv[i + 1]
            if arg.startswith('-') or arg.startswith('--'):
                log_info("(read_from_commandline): ignore '%s' because an argument is required..." % sys.argv[i])
                continue

            skip = True
            if arg.startswith("["):
                cmd, params = parse_run_parameters(arg)
                plist.append(ChildProc(cmd=cmd, params=params))
            else:
                plist.append(ChildProc(cmd=arg))

    return plist


def usage():
    print("[-p|--monitor-pid] pid            - pid of main process (for monitoring)")
    print("[-d|--run-from-dir] dir           - run programs from directory")
    print("[-f|--run-from-file] file         - run programs from file")
    print("[-r|--run] '[params]prog args..'  - run programs from command line")
    print("[-a|--run-after] 'prog args..'    - run programs after main process terminated")
    print("[-v|--verbose]                    - Print info messages")
    print("[-V|--version]                    - Version info")
    print("[-c|--check-period] sec           - period for check processes. Default: %s" % check_alive_period)
    print("[-t|--terminate-timeout] sec      - timeout for teminate processes")
    print("                                    Then the processes will be killed. Default: %s" % timeout_for_terminate)
    print("--disable-monitor                 - only run process")


if __name__ == "__main__":

    if check_arg_param(['--version', '-V']):
        print("Version: %s" % PRUNNER_VERSION)
        exit(0)

    if check_arg_param(['-h', '--help']):
        usage()
        exit(0)

    from_dir = get_arg_param(['-d', '--run-from-dir'], '/etc/nxagent/nxssh.d')
    from_file = get_arg_param(['-f', '--run-from-file'], '')
    main_pid = int(get_arg_param(['-p', '--monitor-pid'], '0'))
    not_monit = check_arg_param(['--disable-monitor'])
    verbose = check_arg_param(['-v', '--verbose'])
    check_alive_period = int(get_arg_param(['-c', '--check-period'], '%s' % check_alive_period))
    timeout_for_terminate = int(get_arg_param(['-t', '--terminate-timeout'], '%s' % timeout_for_terminate))

    if not not_monit:
        if main_pid == 0:
            usage()
            exit(1)

        if not psutil.pid_exists(main_pid):
            log_error("process with pid '%d' not exist" % main_pid)
            exit(1)

    run_list = list()

    if len(from_file) > 0:
        run_list = run_list + read_from_file(from_file)

    if len(from_dir):
        run_list = run_list + read_from_dir(from_dir)

    run_list = run_list + read_from_commandline(['-r', '--run'])
    run_after_list = read_from_commandline(['-a', '--run-after'])

    if len(run_list) == 0 and len(run_after_list) == 0:
        log_error("not found run list. Use -h for help")
        exit(1)

    do_monitoring(main_pid=main_pid, run_list=run_list, not_monit=not_monit, run_after_list=run_after_list)
